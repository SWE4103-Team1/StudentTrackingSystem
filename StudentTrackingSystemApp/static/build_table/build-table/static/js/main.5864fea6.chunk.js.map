{"version":3,"sources":["counts.js","makeData.js","App.js","reportWebVitals.js","index.js"],"names":["App","useState","menu","setMenu","cohortList","semesterList","cohortDropdowns","semesterDropdowns","items","setItems","title","input","value","setValue","coop","total","FIR","SOP","JUN","SEN","counts","setCounts","useEffect","url","regIdx","toLowerCase","test","axios","get","then","res","data","countCoop","countTotal","cohortItems","cohorts","cohort","push","Dropdown","Item","eventKey","semesterItems","semesters","semester","className","DropdownButton","id","variant","onSelect","e","Form","Row","Col","Table","hover","size","makeData","setData","a","fetch","response","json","map","row","fields","final_data","console","log","makeTranscript","key","length","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","onChange","target","undefined","placeholder","SelectColumnFilter","options","React","useMemo","Set","forEach","add","values","option","i","fuzzyTextFilterFn","rows","matchSorter","keys","TableMasterList","columns","modalOpen","modalClose","selectKey","modalState","selectName","filterTypes","fuzzyText","text","filter","rowValue","String","startsWith","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","useSortBy","getTableProps","getTableBodyProps","headerGroups","prepareRow","visibleColumns","state","firstPageRows","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","canFilter","isSorted","isSortedDesc","colSpan","onClick","cells","cell","name","enterAdvanced","getRowProps","getCellProps","TableTranscript","compareCourseCode","rowA","rowB","desc","arr_A","split","arr_B","Number","parseFloat","b","isNaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","autoRemove","val","TranscriptData","setTranscriptData","modalShow","setModalShow","advancedKey","advancedKeySet","transcriptName","setTranscriptName","handleClose","Header","accessor","columnsTranscripts","sortType","disableFilters","Modal","show","onHide","closeButton","Title","Body","style","fontFamily","Footer","Button","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5864fea6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  DropdownButton,\r\n  Dropdown,\r\n  Table,\r\n  Form,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default function App() {\r\n  // State variable that represents the list of\r\n  // react-bootstrap dropdown items currently being displayed in\r\n  // the count selector dropdown\r\n  const [menu, setMenu] = useState([]);\r\n  // State variable that is populated only once on page render.\r\n  // Holds two lists of react-bootstrap dropdown items, one for\r\n  // all cohorts being stored in the db and one for all semesters\r\n  const [items, setItems] = useState({\r\n    cohortList: [],\r\n    semesterList: [],\r\n    cohortDropdowns: [],\r\n    semesterDropdowns: []\r\n  });\r\n  // State variable that represents the current parameter choice\r\n  const [value, setValue] = useState({ title: \"\", input: \"\" });\r\n  // State variable that represents the counts being displayed to the user\r\n  const [counts, setCounts] = useState({\r\n    coop: 0,\r\n    total: 0,\r\n    FIR: 0,\r\n    SOP: 0,\r\n    JUN: 0,\r\n    SEN: 0\r\n  });\r\n\r\n  // Effect that makes appropriate API call based on the chosen parameter\r\n  // and populates the counts state variable for display to user\r\n  useEffect(() => {\r\n    const regexArr = [/\\d{4}-\\d{4}$/, /\\d{4}\\/FA|WI|SM$/];\r\n    let url = \"\";\r\n    let regIdx = 0;\r\n\r\n    if (value.title.toLowerCase() === \"cohort\") {\r\n      url = \"http://127.0.0.1:8000/api/counts_cohort/\" + value.input;\r\n    } else {\r\n      url = \"http://127.0.0.1:8000/api/counts_semester/\" + value.input;\r\n      regIdx = 1;\r\n    }\r\n\r\n    // Only call API if the input matches regular expression based\r\n    // on parameter used\r\n    if (regexArr[regIdx].test(value.input)) {\r\n      axios.get(url).then((res) => {\r\n        setCounts({\r\n          coop: res.data.countCoop,\r\n          total: res.data.countTotal,\r\n          FIR: res.data.FIR,\r\n          SOP: res.data.SOP,\r\n          JUN: res.data.JUN,\r\n          SEN: res.data.SEN\r\n        });\r\n      });\r\n    }\r\n  }, [value]);\r\n\r\n  // Effect that is run once on page render. Makes an API call which retrieves every unqiue\r\n  // cohort (start date) and semester currently being stored in the database. Stores\r\n  // these values as react-bootstrap dropdown items in the items state variable\r\n  useEffect(() => {\r\n    axios.get(\"http://127.0.0.1:8000/api/count_parameters\").then((res) => {\r\n      let cohortItems = [];\r\n      for (const cohort of res.data.cohorts) {\r\n        cohortItems.push(\r\n          <Dropdown.Item eventKey={cohort}>{cohort}</Dropdown.Item>\r\n        );\r\n      }\r\n\r\n      let semesterItems = [];\r\n      for (const semester of res.data.semesters) {\r\n        semesterItems.push(\r\n          <Dropdown.Item eventKey={semester}>{semester}</Dropdown.Item>\r\n        );\r\n      }\r\n\r\n      setItems({\r\n        cohortList: res.data.cohorts,\r\n        semesterList: res.data.semesters,\r\n        cohortDropdowns: cohortItems,\r\n        semesterDropdowns: semesterItems\r\n      });\r\n\r\n      setValue({ title: \"Cohort\", input: res.data.cohorts[0] });\r\n\r\n      setMenu(cohortItems);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"countsCard\">\r\n      <div className=\"headerDiv\">\r\n        <div className=\"dropdownDiv\">\r\n          <DropdownButton\r\n            id=\"dropdown-basic-button\"\r\n            title={value.title}\r\n            variant=\"danger\"\r\n            onSelect={(e) => {\r\n              // setValue({ title: e, input: value.input });\r\n              if (e.toLowerCase() === \"cohort\") {\r\n                setMenu(items.cohortDropdowns);\r\n                setValue({ title: e, input: items.cohortList[0] });\r\n              } else {\r\n                setMenu(items.semesterDropdowns);\r\n                setValue({ title: e, input: items.semesterList[0] });\r\n              }\r\n            }}\r\n          >\r\n            <Dropdown.Item eventKey=\"Cohort\">Cohort</Dropdown.Item>\r\n            <Dropdown.Item eventKey=\"Semester\">Semester</Dropdown.Item>\r\n          </DropdownButton>\r\n        </div>\r\n        <div className=\"formDiv\">\r\n          <Form>\r\n            <Row>\r\n              <Col>\r\n                <DropdownButton\r\n                  id=\"dropdown-basic-button\"\r\n                  title={value.input}\r\n                  variant=\"danger\"\r\n                  onSelect={(e) => setValue({ title: value.title, input: e })}\r\n                >\r\n                  {menu}\r\n                </DropdownButton>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n      <div className=\"tableDiv\">\r\n        <Table hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>Count</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className = \"counts_tbody\">\r\n            <tr>\r\n              <td>Total</td>\r\n              <td>{counts.total}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Coop</td>\r\n              <td>{counts.coop}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>FIR</td>\r\n              <td>{counts.FIR}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>SOP</td>\r\n              <td>{counts.SOP}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>JUN</td>\r\n              <td>{counts.JUN}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>SEN</td>\r\n              <td>{counts.SEN}</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n  );\r\n}","export  async function makeData(setData) {\r\n    const url = 'http://127.0.0.1:8000/api/student_data';\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const final_data = await data.map(row => {\r\n      \r\n      return row.fields\r\n   })\r\n   console.log(final_data)\r\n    return setData(final_data)\r\n  }\r\n\r\n  export async function makeTranscript(key, setData) {\r\n    if(key.length !== 0){\r\n      console.log(key);\r\n      const url = \"http://127.0.0.1:8000/get_transcript/\" + key[0] + \"\";\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      console.log(data);\r\n  \r\n      return setData(data);\r\n    }\r\n\r\n\t}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  useTable,\r\n  useFilters,\r\n  useGlobalFilter,\r\n  useSortBy,\r\n  useAsyncDebounce\r\n} from \"react-table\";\r\nimport Counts from './counts'\r\n// A great library for fuzzy filtering/sorting items\r\nimport {matchSorter} from \"match-sorter\";\r\nimport \"./App.css\";\r\nimport {makeData,makeTranscript} from \"./makeData\";\r\nimport {Button, Table} from 'react-bootstrap'\r\nimport {Modal} from 'react-bootstrap'\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter }\r\n}) {\r\n  const count = preFilteredRows.length;\r\n\r\n  return (\r\n    <input  \r\n      value={filterValue || \"\"}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search Records...`}\r\n    />\r\n  );\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id }\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n      value={filterValue}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id }\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\"\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || \"\"}\r\n        type=\"number\"\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            val ? parseInt(val, 10) : undefined,\r\n            old[1]\r\n          ]);\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: \"70px\",\r\n          marginRight: \"0.5rem\"\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || \"\"}\r\n        type=\"number\"\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            old[0],\r\n            val ? parseInt(val, 10) : undefined\r\n          ]);\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: \"70px\",\r\n          marginLeft: \"0.5rem\"\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = (val) => !val;\r\n\r\n// Our table component\r\n     \r\nfunction TableMasterList({\r\n\tcolumns,\r\n\tdata,\r\n\tmodalClose,\r\n\tmodalOpen,\r\n\tmodalState,\r\n\tselectKey,\r\n\tselectName,\r\n}) {\r\n\tfunction enterAdvanced(row) {\r\n\t\tconst key = row.cells.map((cell) => {\r\n\t\t\tif (cell.column.id === \"student_number\") {\r\n\t\t\t\treturn cell.value;\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst name = row.cells.map((cell) => {\r\n\t\t\tif (cell.column.id === \"name\") {\r\n\t\t\t\treturn cell.value;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodalOpen();\r\n\t\tselectName(name);\r\n\t\tselectKey(key);\r\n\t\tconsole.log(key);\r\n\t}\r\n\tconst filterTypes = React.useMemo(\r\n\t\t() => ({\r\n\t\t\t// Add a new fuzzyTextFilterFn filter type.\r\n\t\t\tfuzzyText: fuzzyTextFilterFn,\r\n\t\t\t// Or, override the default text filter to use\r\n\t\t\t// \"startWith\"\r\n\t\t\ttext: (rows, id, filterValue) => {\r\n\t\t\t\treturn rows.filter((row) => {\r\n\t\t\t\t\tconst rowValue = row.values[id];\r\n\t\t\t\t\treturn rowValue !== undefined\r\n\t\t\t\t\t\t? String(rowValue)\r\n\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t.startsWith(String(filterValue).toLowerCase())\r\n\t\t\t\t\t\t: true;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t}),\r\n\t\t[]\r\n\t);\r\n\r\n\tconst defaultColumn = React.useMemo(\r\n\t\t() => ({\r\n\t\t\t// Let's set up our default Filter UI\r\n\t\t\tFilter: DefaultColumnFilter,\r\n\t\t}),\r\n\t\t[]\r\n\t);\r\n\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\trows,\r\n\t\tprepareRow,\r\n\t\tstate,\r\n\t\tvisibleColumns,\r\n\t} = useTable(\r\n\t\t{\r\n\t\t\tcolumns,\r\n\t\t\tdata,\r\n\t\t\tdefaultColumn, // Be sure to pass the defaultColumn option\r\n\t\t\tfilterTypes,\r\n\t\t},\r\n\t\tuseFilters, // useFilters!\r\n\t\tuseGlobalFilter,\r\n\t\tuseSortBy // useGlobalFilter!\r\n\t);\r\n\r\n\t// We don't want to render all of the rows for this example, so cap\r\n\t// it for this use case\r\n\tconst firstPageRows = rows;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<table className='styled-table' {...getTableProps()}>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t{headerGroups.map((headerGroup) => (\r\n\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t\t{headerGroup.headers.map((column) => (\r\n\t\t\t\t\t\t\t\t<th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n\t\t\t\t\t\t\t\t\t{column.render(\"Header\")}\r\n\t\t\t\t\t\t\t\t\t{/* Render the columns filter UI */}\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{column.canFilter ? column.render(\"Filter\") : null}\r\n\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t{column.isSorted\r\n\t\t\t\t\t\t\t\t\t\t\t\t? column.isSortedDesc\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"🔽\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"🔼\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t: \"\"}{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th colSpan={visibleColumns.length}></th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody {...getTableBodyProps()}>\r\n\t\t\t\t\t{firstPageRows.map((row, i) => {\r\n\t\t\t\t\t\tprepareRow(row);\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<tr className = \"List_Row\" onClick={() => enterAdvanced(row)} {...row.getRowProps()}>\r\n\t\t\t\t\t\t\t\t{row.cells.map((cell) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<td className='table-td-cell' {...cell.getCellProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t{cell.render(\"Cell\")}\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\t<br />\r\n\r\n\t\t\t\r\n\t\t</>\r\n\t);\r\n}\r\nfunction TableTranscript({\r\n\tcolumns,\r\n\tdata,\r\n\tmodalClose,\r\n\tmodalOpen,\r\n\tmodalState,\r\n\tselectKey,\r\n\tselectName,\r\n}) {\r\n\t\r\n\tconst filterTypes = React.useMemo(\r\n\t\t() => ({\r\n\t\t\t// Add a new fuzzyTextFilterFn filter type.\r\n\t\t\tfuzzyText: fuzzyTextFilterFn,\r\n\t\t\t// Or, override the default text filter to use\r\n\t\t\t// \"startWith\"\r\n\t\t\ttext: (rows, id, filterValue) => {\r\n\t\t\t\treturn rows.filter((row) => {\r\n\t\t\t\t\tconst rowValue = row.values[id];\r\n\t\t\t\t\treturn rowValue !== undefined\r\n\t\t\t\t\t\t? String(rowValue)\r\n\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t.startsWith(String(filterValue).toLowerCase())\r\n\t\t\t\t\t\t: true;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t}),\r\n\t\t[]\r\n\t);\r\n\r\n\r\n\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\trows,\r\n\t\tprepareRow,\r\n\t\tstate,\r\n\t\tvisibleColumns,\r\n\t} = useTable(\r\n\t\t{\r\n\t\t\tcolumns,\r\n\t\t\tdata,\r\n\t\t\t // Be sure to pass the defaultColumn option\r\n\t\t\tfilterTypes,\r\n\t\t},\r\n\t\tuseFilters, // useFilters!\r\n\t\tuseGlobalFilter,\r\n\t\tuseSortBy // useGlobalFilter!\r\n\t);\r\n\r\n\t// We don't want to render all of the rows for this example, so cap\r\n\t// it for this use case\r\n\tconst firstPageRows = rows;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Table className='styled-transcript' {...getTableProps()}>\r\n\t\t\t\t<thead className ='styled-transcript-thead'>\r\n\t\t\t\t\t{headerGroups.map((headerGroup) => (\r\n\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t\t{headerGroup.headers.map((column) => (\r\n\t\t\t\t\t\t\t\t<th className= \"transcript_head\" {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n\t\t\t\t\t\t\t\t\t{column.render(\"Header\")}\r\n\t\t\t\t\t\t\t\t\t{/* Render the columns filter UI */}\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{column.canFilter ? column.render(\"Filter\") : null}\r\n\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t{column.isSorted\r\n\t\t\t\t\t\t\t\t\t\t\t\t? column.isSortedDesc\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"🔽\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"🔼\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t: \"\"}{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th colSpan={visibleColumns.length}></th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody className ='styled-transcript-tbody' {...getTableBodyProps()}>\r\n\t\t\t\t\t{firstPageRows.map((row, i) => {\r\n\t\t\t\t\t\tprepareRow(row);\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<tr  {...row.getRowProps()}>\r\n\t\t\t\t\t\t\t\t{row.cells.map((cell) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<td className='transcript_cell' {...cell.getCellProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t{cell.render(\"Cell\")}\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</tr>\r\n              \r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n        \r\n\t\t\t\t</tbody>\r\n\t\t\t</Table>\r\n\t\t\t<br />\r\n\r\n\t\t\t\r\n\t\t</>\r\n\t);\r\n}\r\n// Define a custom filter filter function!\r\nfunction filterGreaterThan(rows, id, filterValue) {\r\n\treturn rows.filter((row) => {\r\n\t\tconst rowValue = row.values[id];\r\n\t\treturn rowValue >= filterValue;\r\n\t});\r\n}\r\n\r\n\r\nfunction compareCourseCode(rowA, rowB, id, desc) {\r\n  let arr_A = rowA.values[id]\r\n  arr_A = arr_A.split(\"*\")\r\n  console.log(arr_A)\r\n  let arr_B = rowB.values[id]\r\n  \r\n  arr_B = arr_B.split(\"*\")\r\n  console.log(arr_B)\r\n  let a = Number.parseFloat(arr_A[1]);\r\n  let b = Number.parseFloat(arr_B[1]);\r\n  if (Number.isNaN(a)) {  // Blanks and non-numeric strings to bottom\r\n      a = desc ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\r\n  }\r\n  if (Number.isNaN(b)) {\r\n      b = desc ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\r\n  }\r\n  if (a > b) return 1; \r\n  if (a < b) return -1;\r\n  return 0;\r\n}\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = (val) => typeof val !== \"number\";\r\n\r\nfunction App() {\r\n\tconst [data, setData] = React.useState([]);\r\n\tconst [TranscriptData, setTranscriptData] = React.useState([]);\r\n\tconst [modalShow, setModalShow] = React.useState(false);\r\n\tconst [advancedKey, advancedKeySet] = React.useState([]);\r\n\tconst [transcriptName, setTranscriptName] = React.useState(\"\");\r\n\tconst handleClose = () => setModalShow(false);\r\n\tconst handleShow = () => setModalShow(true);\r\n\tReact.useEffect(() => {\r\n\t\t(async () => {\r\n\t\t\tawait makeData(setData);\r\n\t\t})();\r\n\t}, []);\r\n\r\n\tReact.useEffect(() => {\r\n\t\t(async () => {\r\n\t\t\tawait makeTranscript(advancedKey, setTranscriptData);\r\n\t\t})();\r\n\t}, [advancedKey]);\r\n\r\n\tconst columns = React.useMemo(\r\n\t\t() => [\r\n\t\t\t{\r\n\t\t\t\tHeader: \" \",\r\n\t\t\t\tcolumns: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Student ID\",\r\n\t\t\t\t\t\taccessor: \"student_number\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Name\",\r\n\t\t\t\t\t\taccessor: \"name\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Program\",\r\n\t\t\t\t\t\taccessor: \"program\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Campus\",\r\n\t\t\t\t\t\taccessor: \"campus\",\r\n\t\t\t\t\t\tFilter: SelectColumnFilter,\r\n\t\t\t\t\t\tfilter: \"includes\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Rank\",\r\n\t\t\t\t\t\taccessor: \"rank\",\r\n\t\t\t\t\t\tFilter: SelectColumnFilter,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t\t[]\r\n\t);\r\n\r\n\tconst columnsTranscripts = React.useMemo(\r\n\t\t() => [\r\n\t\t\t{\r\n\t\t\t\tHeader: \" \",\r\n\t\t\t\tcolumns: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Course Code\",\r\n\t\t\t\t\t\taccessor: \"Course_Code\",\r\n            sortType: compareCourseCode, // custom function\r\n            disableFilters: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Course Name\",\r\n\t\t\t\t\t\taccessor: \"Course_Name\",\r\n            disableFilters: true,\r\n\t\t\t\t\t},\r\n          {\r\n\t\t\t\t\t\tHeader: \"Course Type\",\r\n\t\t\t\t\t\taccessor: \"Course_Type\",\r\n            disableFilters: true,\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Semester\",\r\n\t\t\t\t\t\taccessor: \"Semester\",\r\n            disableFilters: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Section\",\r\n\t\t\t\t\t\taccessor: \"Section\",\r\n\t\t\t\t\t\tfilter: \"includes\",\r\n            disableFilters: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Credit Hours\",\r\n\t\t\t\t\t\taccessor: \"Credit_Hours\",\r\n            disableFilters: true,\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t},\r\n          {\r\n\t\t\t\t\t\tHeader: \"Grade\",\r\n\t\t\t\t\t\taccessor: \"Grade\",\r\n            disableFilters: true,\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n         \r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t\t[]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t<div className='master-container'>\r\n\t\t\t<div className = \"div-table\">\r\n\t\t\t<Modal\r\n\t\t\t\tshow={modalShow}\r\n\t\t\t\tonHide={handleClose}\r\n\t\t\t\taria-labelledby='example-modal-sizes-title-lg'\r\n\t\t\t\tsize='xl'>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title>Transcript</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<div className='row_modal'>\r\n\t\t\t\t\t\t<div className='column_modal'>\r\n\t\t\t\t\t\t\t<TableTranscript columns={columnsTranscripts} data={TranscriptData}></TableTranscript>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='column_modal'>\r\n\t\t\t\t\t\t\t<h1 style={{fontFamily: \"sans-serif\"}}>{transcriptName}</h1><br/>\r\n\t\t\t\t\t\t\t<h2 style={{fontFamily: \"sans-serif\"}}>{advancedKey}</h2>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<Button variant='secondary' onClick={handleClose}>\r\n\t\t\t\t\t\tClose\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t\t<TableMasterList\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\tdata={data}\r\n\t\t\t\tmodalClose={handleClose}\r\n\t\t\t\tmodalOpen={handleShow}\r\n\t\t\t\tmodalState={modalShow}\r\n\t\t\t\tselectKey={advancedKeySet}\r\n\t\t\t\tselectName={setTranscriptName}\r\n\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className = 'div-counts'>\r\n\t\t\t<Counts></Counts>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\t\r\n\t\t\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\r\n    <App />,\r\n \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}