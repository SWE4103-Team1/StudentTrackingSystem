{"version":3,"sources":["counts.js","makeData.js","App.js","reportWebVitals.js","index.js"],"names":["Counts","useState","title","input","value","setValue","coop","total","FIR","SOP","JUN","SEN","counts","setCounts","className","DropdownButton","id","variant","onSelect","e","Dropdown","Item","eventKey","Form","Row","Col","type","placeholder","onChange","target","onClick","url","toLowerCase","axios","get","then","res","data","countCoop","countTotal","Table","hover","size","makeData","setData","a","fetch","response","json","map","row","fields","final_data","console","log","makeTranscript","key","length","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","undefined","SelectColumnFilter","options","React","useMemo","Set","forEach","add","values","option","i","fuzzyTextFilterFn","rows","matchSorter","keys","TableMasterList","columns","modalOpen","modalClose","selectKey","modalState","selectName","filterTypes","fuzzyText","text","filter","rowValue","String","startsWith","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","useSortBy","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","firstPageRows","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","canFilter","isSorted","isSortedDesc","colSpan","cells","cell","name","enterAdvanced","getRowProps","getCellProps","JSON","stringify","filters","TableTranscript","compareCourseCode","rowA","rowB","desc","arr_A","split","arr_B","Number","parseFloat","b","isNaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","autoRemove","val","App","TranscriptData","setTranscriptData","modalShow","setModalShow","advancedKey","advancedKeySet","transcriptName","setTranscriptName","handleClose","useEffect","Header","accessor","columnsTranscripts","sortType","disableFilters","Modal","show","onHide","closeButton","Title","Body","Footer","Button","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4ae0f5ff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  DropdownButton,\r\n  Dropdown,\r\n  Table,\r\n  Form,\r\n  Button,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default function Counts() {\r\n  const [value, setValue] = useState({ title: \"Cohort\", input: \"\" });\r\n  const [counts, setCounts] = useState({\r\n    coop: 0,\r\n    total: 0,\r\n    FIR: 0,\r\n    SOP: 0,\r\n    JUN: 0,\r\n    SEN: 0\r\n  });\r\n\r\n  const submitValue = (e) => {\r\n    // Make API call and update setCounts based on selected parameter\r\n\r\n    let url = \"\";\r\n    if (value.title.toLowerCase() === \"cohort\") {\r\n      url = \"http://127.0.0.1:8000/api/counts_start_date/\" + value.input;\r\n    } else {\r\n      url = \"http://127.0.0.1:8000/api/counts_semester/\" + value.input;\r\n    }\r\n\r\n    axios.get(url).then((res) => {\r\n      setCounts({\r\n        coop: res.data.countCoop,\r\n        total: res.data.countTotal,\r\n        FIR: res.data.FIR,\r\n        SOP: res.data.SOP,\r\n        JUN: res.data.JUN,\r\n        SEN: res.data.SEN\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"countsCard\">\r\n      <div className=\"headerDiv\">\r\n        <div className=\"dropdownDiv\">\r\n          <DropdownButton\r\n            id=\"dropdown-basic-button\"\r\n            title={value.title}\r\n            variant=\"danger\"\r\n            onSelect={(e) => setValue({ title: e, input: value.input })}\r\n          >\r\n            <Dropdown.Item eventKey=\"Cohort\">Cohort</Dropdown.Item>\r\n            <Dropdown.Item eventKey=\"Semester\">Semester</Dropdown.Item>\r\n          </DropdownButton>\r\n        </div>\r\n        <div className=\"formDiv\">\r\n          <Form>\r\n            <Row>\r\n              <Col>\r\n                <input \r\n                 \r\n                  className=\"inputValueForm\"\r\n                  type=\"text\"\r\n                  placeholder={value.title}\r\n                  onChange={(e) =>\r\n                    setValue({ title: value.title, input: e.target.value })\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <button\r\n                  \r\n                  className=\"submitValueForm\"\r\n                  \r\n                  onClick={submitValue}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <div className=\"tableDiv\">\r\n        <Table hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>Enrolled For: {value.title}</th>\r\n              <th>Count</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className = \"counts_tbody\">\r\n            <tr>\r\n              <td>Total</td>\r\n              <td>{counts.total}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Coop</td>\r\n              <td>{counts.coop}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>FIR</td>\r\n              <td>{counts.FIR}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>SOP</td>\r\n              <td>{counts.SOP}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>JUN</td>\r\n              <td>{counts.JUN}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>SEN</td>\r\n              <td>{counts.SEN}</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export  async function makeData(setData) {\r\n    const url = 'http://127.0.0.1:8000/api/student_data';\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const final_data = await data.map(row => {\r\n      \r\n      return row.fields\r\n   })\r\n   console.log(final_data)\r\n    return setData(final_data)\r\n  }\r\n\r\n  export async function makeTranscript(key, setData) {\r\n    if(key.length !== 0){\r\n      console.log(key);\r\n      const url = \"http://127.0.0.1:8000/get_transcript/\" + key[0] + \"\";\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      console.log(data);\r\n  \r\n      return setData(data);\r\n    }\r\n\r\n\t}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  useTable,\r\n  useFilters,\r\n  useGlobalFilter,\r\n  useSortBy,\r\n  useAsyncDebounce\r\n} from \"react-table\";\r\nimport Counts from './counts'\r\n// A great library for fuzzy filtering/sorting items\r\nimport {matchSorter} from \"match-sorter\";\r\nimport \"./App.css\";\r\nimport {makeData,makeTranscript} from \"./makeData\";\r\nimport {Button, Table} from 'react-bootstrap'\r\nimport {Modal} from 'react-bootstrap'\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter }\r\n}) {\r\n  const count = preFilteredRows.length;\r\n\r\n  return (\r\n    <input  \r\n      value={filterValue || \"\"}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`Search Records...`}\r\n    />\r\n  );\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id }\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n      value={filterValue}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id }\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\"\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || \"\"}\r\n        type=\"number\"\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            val ? parseInt(val, 10) : undefined,\r\n            old[1]\r\n          ]);\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: \"70px\",\r\n          marginRight: \"0.5rem\"\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || \"\"}\r\n        type=\"number\"\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            old[0],\r\n            val ? parseInt(val, 10) : undefined\r\n          ]);\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: \"70px\",\r\n          marginLeft: \"0.5rem\"\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = (val) => !val;\r\n\r\n// Our table component\r\n     \r\nfunction TableMasterList({\r\n\tcolumns,\r\n\tdata,\r\n\tmodalClose,\r\n\tmodalOpen,\r\n\tmodalState,\r\n\tselectKey,\r\n\tselectName,\r\n}) {\r\n\tfunction enterAdvanced(row) {\r\n\t\tconst key = row.cells.map((cell) => {\r\n\t\t\tif (cell.column.id === \"student_number\") {\r\n\t\t\t\treturn cell.value;\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst name = row.cells.map((cell) => {\r\n\t\t\tif (cell.column.id === \"name\") {\r\n\t\t\t\treturn cell.value;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodalOpen();\r\n\t\tselectName(name);\r\n\t\tselectKey(key);\r\n\t\tconsole.log(key);\r\n\t}\r\n\tconst filterTypes = React.useMemo(\r\n\t\t() => ({\r\n\t\t\t// Add a new fuzzyTextFilterFn filter type.\r\n\t\t\tfuzzyText: fuzzyTextFilterFn,\r\n\t\t\t// Or, override the default text filter to use\r\n\t\t\t// \"startWith\"\r\n\t\t\ttext: (rows, id, filterValue) => {\r\n\t\t\t\treturn rows.filter((row) => {\r\n\t\t\t\t\tconst rowValue = row.values[id];\r\n\t\t\t\t\treturn rowValue !== undefined\r\n\t\t\t\t\t\t? String(rowValue)\r\n\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t.startsWith(String(filterValue).toLowerCase())\r\n\t\t\t\t\t\t: true;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t}),\r\n\t\t[]\r\n\t);\r\n\r\n\tconst defaultColumn = React.useMemo(\r\n\t\t() => ({\r\n\t\t\t// Let's set up our default Filter UI\r\n\t\t\tFilter: DefaultColumnFilter,\r\n\t\t}),\r\n\t\t[]\r\n\t);\r\n\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\trows,\r\n\t\tprepareRow,\r\n\t\tstate,\r\n\t\tvisibleColumns,\r\n\t} = useTable(\r\n\t\t{\r\n\t\t\tcolumns,\r\n\t\t\tdata,\r\n\t\t\tdefaultColumn, // Be sure to pass the defaultColumn option\r\n\t\t\tfilterTypes,\r\n\t\t},\r\n\t\tuseFilters, // useFilters!\r\n\t\tuseGlobalFilter,\r\n\t\tuseSortBy // useGlobalFilter!\r\n\t);\r\n\r\n\t// We don't want to render all of the rows for this example, so cap\r\n\t// it for this use case\r\n\tconst firstPageRows = rows;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<table className='styled-table' {...getTableProps()}>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t{headerGroups.map((headerGroup) => (\r\n\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t\t{headerGroup.headers.map((column) => (\r\n\t\t\t\t\t\t\t\t<th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n\t\t\t\t\t\t\t\t\t{column.render(\"Header\")}\r\n\t\t\t\t\t\t\t\t\t{/* Render the columns filter UI */}\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{column.canFilter ? column.render(\"Filter\") : null}\r\n\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t{column.isSorted\r\n\t\t\t\t\t\t\t\t\t\t\t\t? column.isSortedDesc\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"🔽\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"🔼\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t: \"\"}{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th colSpan={visibleColumns.length}></th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody {...getTableBodyProps()}>\r\n\t\t\t\t\t{firstPageRows.map((row, i) => {\r\n\t\t\t\t\t\tprepareRow(row);\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<tr onClick={() => enterAdvanced(row)} {...row.getRowProps()}>\r\n\t\t\t\t\t\t\t\t{row.cells.map((cell) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<td className='table-td-cell' {...cell.getCellProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t{cell.render(\"Cell\")}\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\t<br />\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<pre>\r\n\t\t\t\t\t<code>{JSON.stringify(state.filters, null, 2)}</code>\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\nfunction TableTranscript({\r\n\tcolumns,\r\n\tdata,\r\n\tmodalClose,\r\n\tmodalOpen,\r\n\tmodalState,\r\n\tselectKey,\r\n\tselectName,\r\n}) {\r\n\t\r\n\tconst filterTypes = React.useMemo(\r\n\t\t() => ({\r\n\t\t\t// Add a new fuzzyTextFilterFn filter type.\r\n\t\t\tfuzzyText: fuzzyTextFilterFn,\r\n\t\t\t// Or, override the default text filter to use\r\n\t\t\t// \"startWith\"\r\n\t\t\ttext: (rows, id, filterValue) => {\r\n\t\t\t\treturn rows.filter((row) => {\r\n\t\t\t\t\tconst rowValue = row.values[id];\r\n\t\t\t\t\treturn rowValue !== undefined\r\n\t\t\t\t\t\t? String(rowValue)\r\n\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t.startsWith(String(filterValue).toLowerCase())\r\n\t\t\t\t\t\t: true;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t}),\r\n\t\t[]\r\n\t);\r\n\r\n\r\n\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\trows,\r\n\t\tprepareRow,\r\n\t\tstate,\r\n\t\tvisibleColumns,\r\n\t} = useTable(\r\n\t\t{\r\n\t\t\tcolumns,\r\n\t\t\tdata,\r\n\t\t\t // Be sure to pass the defaultColumn option\r\n\t\t\tfilterTypes,\r\n\t\t},\r\n\t\tuseFilters, // useFilters!\r\n\t\tuseGlobalFilter,\r\n\t\tuseSortBy // useGlobalFilter!\r\n\t);\r\n\r\n\t// We don't want to render all of the rows for this example, so cap\r\n\t// it for this use case\r\n\tconst firstPageRows = rows;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Table className='styled-transcript' {...getTableProps()}>\r\n\t\t\t\t<thead className ='styled-transcript-thead'>\r\n\t\t\t\t\t{headerGroups.map((headerGroup) => (\r\n\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t\t{headerGroup.headers.map((column) => (\r\n\t\t\t\t\t\t\t\t<th className= \"transcript_head\" {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n\t\t\t\t\t\t\t\t\t{column.render(\"Header\")}\r\n\t\t\t\t\t\t\t\t\t{/* Render the columns filter UI */}\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{column.canFilter ? column.render(\"Filter\") : null}\r\n\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t{column.isSorted\r\n\t\t\t\t\t\t\t\t\t\t\t\t? column.isSortedDesc\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"🔽\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"🔼\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t: \"\"}{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th colSpan={visibleColumns.length}></th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody className ='styled-transcript-tbody' {...getTableBodyProps()}>\r\n\t\t\t\t\t{firstPageRows.map((row, i) => {\r\n\t\t\t\t\t\tprepareRow(row);\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<tr  {...row.getRowProps()}>\r\n\t\t\t\t\t\t\t\t{row.cells.map((cell) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<td className='transcript_cell' {...cell.getCellProps()}>\r\n\t\t\t\t\t\t\t\t\t\t\t{cell.render(\"Cell\")}\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</tr>\r\n              \r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n        \r\n\t\t\t\t</tbody>\r\n\t\t\t</Table>\r\n\t\t\t<br />\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<pre>\r\n\t\t\t\t\t<code>{JSON.stringify(state.filters, null, 2)}</code>\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n// Define a custom filter filter function!\r\nfunction filterGreaterThan(rows, id, filterValue) {\r\n\treturn rows.filter((row) => {\r\n\t\tconst rowValue = row.values[id];\r\n\t\treturn rowValue >= filterValue;\r\n\t});\r\n}\r\n\r\n\r\nfunction compareCourseCode(rowA, rowB, id, desc) {\r\n  let arr_A = rowA.values[id]\r\n  arr_A = arr_A.split(\"*\")\r\n  console.log(arr_A)\r\n  let arr_B = rowB.values[id]\r\n  \r\n  arr_B = arr_B.split(\"*\")\r\n  console.log(arr_B)\r\n  let a = Number.parseFloat(arr_A[1]);\r\n  let b = Number.parseFloat(arr_B[1]);\r\n  if (Number.isNaN(a)) {  // Blanks and non-numeric strings to bottom\r\n      a = desc ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\r\n  }\r\n  if (Number.isNaN(b)) {\r\n      b = desc ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\r\n  }\r\n  if (a > b) return 1; \r\n  if (a < b) return -1;\r\n  return 0;\r\n}\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = (val) => typeof val !== \"number\";\r\n\r\nfunction App() {\r\n\tconst [data, setData] = React.useState([]);\r\n\tconst [TranscriptData, setTranscriptData] = React.useState([]);\r\n\tconst [modalShow, setModalShow] = React.useState(false);\r\n\tconst [advancedKey, advancedKeySet] = React.useState([]);\r\n\tconst [transcriptName, setTranscriptName] = React.useState(\"\");\r\n\tconst handleClose = () => setModalShow(false);\r\n\tconst handleShow = () => setModalShow(true);\r\n\tReact.useEffect(() => {\r\n\t\t(async () => {\r\n\t\t\tawait makeData(setData);\r\n\t\t})();\r\n\t}, []);\r\n\r\n\tReact.useEffect(() => {\r\n\t\t(async () => {\r\n\t\t\tawait makeTranscript(advancedKey, setTranscriptData);\r\n\t\t})();\r\n\t}, [advancedKey]);\r\n\r\n\tconst columns = React.useMemo(\r\n\t\t() => [\r\n\t\t\t{\r\n\t\t\t\tHeader: \" \",\r\n\t\t\t\tcolumns: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Student ID\",\r\n\t\t\t\t\t\taccessor: \"student_number\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Name\",\r\n\t\t\t\t\t\taccessor: \"name\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Program\",\r\n\t\t\t\t\t\taccessor: \"program\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Campus\",\r\n\t\t\t\t\t\taccessor: \"campus\",\r\n\t\t\t\t\t\tFilter: SelectColumnFilter,\r\n\t\t\t\t\t\tfilter: \"includes\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Rank\",\r\n\t\t\t\t\t\taccessor: \"rank\",\r\n\t\t\t\t\t\tFilter: SelectColumnFilter,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t\t[]\r\n\t);\r\n\r\n\tconst columnsTranscripts = React.useMemo(\r\n\t\t() => [\r\n\t\t\t{\r\n\t\t\t\tHeader: \" \",\r\n\t\t\t\tcolumns: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Course Code\",\r\n\t\t\t\t\t\taccessor: \"Course_Code\",\r\n            sortType: compareCourseCode, // custom function\r\n            disableFilters: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Course Name\",\r\n\t\t\t\t\t\taccessor: \"Course_Name\",\r\n            disableFilters: true,\r\n\t\t\t\t\t},\r\n          {\r\n\t\t\t\t\t\tHeader: \"Course Type\",\r\n\t\t\t\t\t\taccessor: \"Course_Type\",\r\n            disableFilters: true,\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Semester\",\r\n\t\t\t\t\t\taccessor: \"Semester\",\r\n            disableFilters: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Section\",\r\n\t\t\t\t\t\taccessor: \"Section\",\r\n\t\t\t\t\t\tfilter: \"includes\",\r\n            disableFilters: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tHeader: \"Credit Hours\",\r\n\t\t\t\t\t\taccessor: \"Credit_Hours\",\r\n            disableFilters: true,\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t},\r\n          {\r\n\t\t\t\t\t\tHeader: \"Grade\",\r\n\t\t\t\t\t\taccessor: \"Grade\",\r\n            disableFilters: true,\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n         \r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t],\r\n\t\t[]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t<div className='master-container'>\r\n\t\t\t<div className = \"div-table\">\r\n\t\t\t<Modal\r\n\t\t\t\tshow={modalShow}\r\n\t\t\t\tonHide={handleClose}\r\n\t\t\t\taria-labelledby='example-modal-sizes-title-lg'\r\n\t\t\t\tsize='xl'>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title>Transcript</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<div className='row_modal'>\r\n\t\t\t\t\t\t<div className='column_modal'>\r\n\t\t\t\t\t\t\t<TableTranscript columns={columnsTranscripts} data={TranscriptData}></TableTranscript>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='column_modal'>\r\n\t\t\t\t\t\t\t<h1>{transcriptName}</h1><br/>\r\n\t\t\t\t\t\t\t<h2>{advancedKey}</h2>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<Button variant='secondary' onClick={handleClose}>\r\n\t\t\t\t\t\tClose\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t\t<TableMasterList\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\tdata={data}\r\n\t\t\t\tmodalClose={handleClose}\r\n\t\t\t\tmodalOpen={handleShow}\r\n\t\t\t\tmodalState={modalShow}\r\n\t\t\t\tselectKey={advancedKeySet}\r\n\t\t\t\tselectName={setTranscriptName}\r\n\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className = 'div-counts'>\r\n\t\t\t<Counts></Counts>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\t\r\n\t\t\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <App />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}