{"version":3,"sources":["makeData.js","App.js","reportWebVitals.js","index.js"],"names":["makeData","setData","a","fetch","response","json","data","map","row","fields","final_data","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","length","value","onChange","e","target","undefined","placeholder","SelectColumnFilter","id","options","React","useMemo","Set","forEach","add","values","option","i","fuzzyTextFilterFn","rows","matchSorter","keys","Table","columns","useState","useEffect","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","useSortBy","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","className","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","canFilter","isSorted","isSortedDesc","colSpan","getRowProps","cells","cell","getCellProps","JSON","stringify","filters","autoRemove","val","App","Header","accessor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.acaa51cb.chunk.js","sourcesContent":["\n \nexport default async function makeData(setData) {\n  const url = 'http://127.0.0.1:8000/api/student_data';\n  const response = await fetch(url);\n  const data = await response.json();\n  const final_data = await data.map(row => {\n    \n    return row.fields\n })\n \n  return setData(final_data)\n}\n","import React, { useEffect, useState } from \"react\";\nimport {styled} from \"styled-components\";\nimport TableScrollbar from 'react-table-scrollbar';\nimport {\n  useTable,\n  useFilters,\n  useGlobalFilter,\n  useSortBy,\n  useAsyncDebounce\n} from \"react-table\";\n// A great library for fuzzy filtering/sorting items\nimport {matchSorter} from \"match-sorter\";\nimport \"./App.css\";\nimport makeData from \"./makeData\";\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter }\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search Records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id } \n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id }\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\"\n      }}\n    >\n      <input\n        value={filterValue[0] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            val ? parseInt(val, 10) : undefined,\n            old[1]\n          ]);\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: \"70px\",\n          marginRight: \"0.5rem\"\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            old[0],\n            val ? parseInt(val, 10) : undefined\n          ]);\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: \"70px\",\n          marginLeft: \"0.5rem\"\n        }}\n      />\n    </div>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\n// Our table component\nfunction Table({ columns}) {\n\n  const [data, setData] = useState([])\n  useEffect (() =>{\n        (async () =>{\n          makeData(setData)\n        })()\n  }, [])\n  \n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      }\n    }),\n    []\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes\n    },\n    useFilters, // useFilters!\n    useGlobalFilter,\n    useSortBy // useGlobalFilter!\n  );\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  \n\n  return (\n    <>\n  \n    \n      <table className=\"styled-table\" {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                 \n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                  <span>\n                   {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' 🔽'\n                        : ' 🔼'\n                      : ''}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n          <tr>\n            <th colSpan={visibleColumns.length}></th>\n          </tr>\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <br />\n      <div>Showing the first 20 results of {rows.length} rows</div>\n      <div>\n        <pre>\n          <code>{JSON.stringify(state.filters, null, 2)}</code>\n        </pre>\n      </div>\n     \n    </>\n  );\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter((row) => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = (val) => typeof val !== \"number\";\n\nfunction App() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \" \",\n        columns: [\n          {\n            Header: \"Student ID\",\n            accessor: \"student_number\"\n          },\n          {\n            Header: \"Name\",\n            accessor: \"name\"\n          },\n          {\n            Header: \"Campus\",\n            accessor: \"campus\",\n            Filter: SelectColumnFilter,\n            filter: \"includes\"\n          },\n          {\n            Header: \"program\",\n            accessor: \"program\"\n          },\n          {\n            Header: \"Rank\",\n            accessor: \"rank\",\n            Filter: SelectColumnFilter,\n            filter: \"includes\"\n          }\n        ]\n      }\n    ],\n    []\n  );\n\n \n  return <Table columns={columns} />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}